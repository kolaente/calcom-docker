# Use postgres/example user/password credentials
version: '3.8'

networks:
  stack:
    name: stack
    external: false
  web:
    external: true

services:
  database:
    container_name: database
    image: postgres
    restart: always
    volumes:
      - /var/apps/calcom/db:/var/lib/postgresql/data/
    env_file: .env
    networks:
      - stack

  calcom:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_WEBAPP_URL: ${NEXT_PUBLIC_WEBAPP_URL}
        NEXT_PUBLIC_LICENSE_CONSENT: ${NEXT_PUBLIC_LICENSE_CONSENT}
        CALCOM_TELEMETRY_DISABLED: ${CALCOM_TELEMETRY_DISABLED}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
        CALENDSO_ENCRYPTION_KEY: ${CALENDSO_ENCRYPTION_KEY}
        DATABASE_URL: ${DATABASE_URL}
      network: stack
    restart: always
    ports:
      - 3000:3000
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}/${POSTGRES_DB}
    depends_on:
      - database
    networks:
      - stack
      - web
    labels:
      - "traefik.docker.network=web"
      - "traefik.enable=true"
      - "traefik.http.routers.calcom.rule=Host(`cal.kolaente.de`)"
      - "traefik.http.routers.calcom.entrypoints=https"
      - "traefik.http.routers.calcom.tls.certResolver=basic"
      - "traefik.http.services.calcom.loadbalancer.server.port=3000"


# Optional use of Prisma Studio. In production, comment out or remove the section below to prevent unwanted access to your database.
#  studio:
#    image: calendso/calendso:latest
#    restart: always
#    networks:
#      - stack
#    ports:
#      - 5555:5555
#    env_file: .env
#    environment:
#      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DATABASE_HOST}/${POSTGRES_DB}
#    depends_on:
#      - database
#    command:
#      - npx
#      - prisma
#      - studio
# END SECTION: Optional use of Prisma Studio.
